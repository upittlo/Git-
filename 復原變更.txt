
1. 將原始碼加入版控的標準流程

(A) 工作目錄內新增/修改/刪除程式碼
(B) 將工作目錄中異動檔案加入索引 (git add .)
(C) 將已加入索引的變更項目建立版本 (git commit)

2. 工作目錄 (working Tree)

是一個變動頻繁的資料夾，所有程式碼都在裡面

每一個改過的檔案，都須明確告訴Git你想要加入版控

告訴Git想要加入版控的唯一方法是更新索引 (add)

索引位於 .git/index

### 還原索引 >> git reset HEAD

3. Stage, Unstage, Untracked

位於索引中檔案 >> Tracked files

不在索引內檔案 >> Untracked Files

索引中檔案根工作目錄中檔案一樣 >>　Stage
索引中檔案與工作目錄不一致　　>> Unstage

4. 取消最近一次的git add

用於全部重置
## git rest HEAD  (重置索引)

用於部分重置 可分段commit
## git reset -p (從索引變更清單中，找出要重製的"部分")
使用後若為部份修改，會出現兩個不同版本，一個有stage一個沒有
用於分段commit

5. 索引與目前最新版本地端差異

git diff --cached


6. 重置工作目錄(用於還原unstaged檔案)

git reset --hard

7 回到前n版(n為數字)

git reset --mixed HEAD~n

工作目錄還是原來狀態
用於刪除commit版本但保留變更，用於整理統整版本

8. 找出工作目錄下每一次的版控紀錄

git reflog

回到任何前一個版本 git reset --hard HEAD@{number}
                or git reset --hard 版本號

9. 回到上一次merge,reset異動之前版本(只可用於merge, reset後，一般commit無效)
 
git reset --hard ORIG_HEAD


10. 復原特定檔案(modified file)

將修改到一半檔案回復原狀

git checkout -- file name
將file name 內容複製到工作目錄
可用在檔案或資料夾

git checkout -- folder name


11. 返回特定版本內容(檔案復原)

用於從過去版本抓回檔案

git checkout commit_id file_or_folder_name


12. 列出被異動的檔案名稱

git diff --name-only

## 列出被改變的狀態
A = add
M = Modified
R = rename

git diff --help 查指令

git diff --name-status
git diff --cached --name-status

比較commit差異
git diff --name-status commit1 commit2


## 只查特定類型變更檔案(ex: 刪除了哪些檔案)
git diff --name-status --diff-filter=D commit1 commit2


13. 正是基部屬與未來修改 >> 使用patch檔

首先在測試機產生變更後  取出patch

測試環境

git diff HEAD~1 HEAD > ../html5-1.patch

copy patch檔到正式環境

更新正式機內容

cd ..

cd 'file name'

git apply --check ../patch檔路徑   (檢查套用過程是否有衝突or失敗)

git apply ../patch 路徑


若發現進版失敗要退版

git apply --reverse ../patch路徑
(將原來改過去的內容還原)

 